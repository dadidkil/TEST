# -*- coding: utf-8 -*-
"""
–ú–æ–¥—É–ª—å –¥–ª—è –ø–æ–ª–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞: —Ä–æ–ª–∏ + –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å –∫–∞–Ω–∞–ª–æ–≤.
"""
import asyncio
import os
import json
import io
from typing import Any, Dict, List, Optional, Union

import discord
from discord.ext import commands

from . import roles_config


class ServerSetup(commands.Cog):
    """–ú–æ–¥—É–ª—å –¥–ª—è –ø–æ–ª–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞."""
    
    def __init__(self, bot: commands.Bot):
        self.bot = bot

    @discord.slash_command(
        name="setup-server",
        description="–ü–æ–ª–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞: —Ä–æ–ª–∏ + –∫–∞–Ω–∞–ª—ã –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –∫–æ–ø–∏–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã."
    )
    @commands.has_permissions(administrator=True)
    async def setup_server(self, ctx: discord.ApplicationContext):
        """–ü–æ–ª–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞: —Å–æ–∑–¥–∞–µ—Ç —Ä–æ–ª–∏ –∏ –∫–æ–ø–∏—Ä—É–µ—Ç –∫–∞–Ω–∞–ª—ã –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞."""
        await ctx.respond("üöÄ –ù–∞—á–∏–Ω–∞—é –ø–æ–ª–Ω—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É —Å–µ—Ä–≤–µ—Ä–∞...", ephemeral=True)
        
        if not ctx.guild:
            await ctx.followup.send("‚ùå –ö–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.", ephemeral=True)
            return

        guild = ctx.guild
        STRUCTURE_FILE_PATH = "main_server_structure.json"

        if not os.path.exists(STRUCTURE_FILE_PATH):
            await ctx.followup.send(
                "‚ùå –õ–æ–∫–∞–ª—å–Ω–∞—è –∫–æ–ø–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ (`main_server_structure.json`).\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É `/update-local-structure`.",
                ephemeral=True
            )
            return
        
        # --- –≠—Ç–∞–ø 1: –†–æ–ª–∏ ---
        await ctx.followup.send("–≠—Ç–∞–ø 1: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–æ–ª–µ–π...", ephemeral=True)
        roles_result = await self._setup_roles(guild)
        await ctx.followup.send("–≠—Ç–∞–ø 1: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–æ–ª–µ–π... ‚úÖ –ì–æ—Ç–æ–≤–æ!", ephemeral=True)
        
        # --- –≠—Ç–∞–ø 2: –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∫–∞–Ω–∞–ª–æ–≤ ---
        await ctx.followup.send(f"–≠—Ç–∞–ø 2: –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∏–∑ `{STRUCTURE_FILE_PATH}`...", ephemeral=True)
        
        try:
            with open(STRUCTURE_FILE_PATH, 'r', encoding='utf-8') as f:
                structure = json.load(f)
        except Exception as e:
            await ctx.followup.send(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª `{STRUCTURE_FILE_PATH}`. –û—à–∏–±–∫–∞: {e}", ephemeral=True)
            return
            
        sync_channels_result = await self._apply_guild_structure(guild, structure)
        await ctx.followup.send("–≠—Ç–∞–ø 2: –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∫–∞–Ω–∞–ª–æ–≤... ‚úÖ –ì–æ—Ç–æ–≤–æ!", ephemeral=True)
        
        # --- –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç ---
        roles_report = (f"–°–æ–∑–¥–∞–Ω–æ: **{roles_result.get('created', 0)}**, "
                        f"–û–±–Ω–æ–≤–ª–µ–Ω–æ: **{roles_result.get('updated', 0)}**, "
                        f"–£–¥–∞–ª–µ–Ω–æ –ª–∏—à–Ω–∏—Ö: **{roles_result.get('deleted', 0)}**")
        
        channels_report = (f"–ö–∞—Ç–µ–≥–æ—Ä–∏–π —Å–æ–∑–¥–∞–Ω–æ/—É–¥–∞–ª–µ–Ω–æ: **{sync_channels_result.get('cats_created', 0)}/{sync_channels_result.get('cats_deleted', 0)}**\n"
                           f"–ö–∞–Ω–∞–ª–æ–≤ —Å–æ–∑–¥–∞–Ω–æ/—É–¥–∞–ª–µ–Ω–æ: **{sync_channels_result.get('chans_created', 0)}/{sync_channels_result.get('chans_deleted', 0)}**")

        final_embed = discord.Embed(title="‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–µ—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞", color=discord.Color.green())
        final_embed.add_field(name="üéñÔ∏è –†–æ–ª–∏", value=roles_report, inline=False)
        final_embed.add_field(name="üîÑ –ö–∞–Ω–∞–ª—ã", value=channels_report, inline=False)
        if roles_result.get('errors') or sync_channels_result.get('errors'):
            final_embed.add_field(name="‚ö†Ô∏è –û—à–∏–±–∫–∏", value=f"–ü—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–æ–∑–Ω–∏–∫–ª–æ **{roles_result.get('errors', 0) + sync_channels_result.get('errors', 0)}** –æ—à–∏–±–æ–∫. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å –±–æ—Ç–∞.", inline=False)
            final_embed.color = discord.Color.orange()
        
        try:
            await ctx.author.send(embed=final_embed)
            await ctx.followup.send("‚úÖ –û—Ç—á–µ—Ç –æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤–∞–º –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.", ephemeral=True)
        except discord.Forbidden:
            await ctx.followup.send("‚ö†Ô∏è –ù–µ —Å–º–æ–≥ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç –≤ –õ–°. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏. –í–æ—Ç –æ—Ç—á–µ—Ç:", embed=final_embed, ephemeral=True)
        except discord.HTTPException as e:
            print(f"‚ÑπÔ∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª, –≤–æ–∑–º–æ–∂–Ω–æ –æ–Ω –±—ã–ª —É–¥–∞–ª–µ–Ω. –û—à–∏–±–∫–∞: {e}")

    # ======================================================================================
    # –°–µ–∫—Ü–∏—è: –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
    # ======================================================================================

    @discord.slash_command(
        name="update-local-structure",
        description="–°–∫–∞—á–∏–≤–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–∞–Ω–∞–ª–æ–≤ —Å –≥–ª–∞–≤–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –ª–æ–∫–∞–ª—å–Ω–æ."
    )
    @commands.has_permissions(administrator=True)
    async def update_local_structure(self, ctx: discord.ApplicationContext):
        """–°–∫–∞—á–∏–≤–∞–µ—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å –≥–ª–∞–≤–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞."""
        await ctx.defer(ephemeral=True)

        SOURCE_GUILD_ID = 1369754088941682830
        STRUCTURE_FILE_PATH = "main_server_structure.json"

        source_guild = self.bot.get_guild(SOURCE_GUILD_ID)
        if not source_guild:
            await ctx.followup.send(
                f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏—Å—Ö–æ–¥–Ω—ã–π —Å–µ—Ä–≤–µ—Ä (ID: {SOURCE_GUILD_ID}).\n"
                "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–æ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —ç—Ç–æ–º —Å–µ—Ä–≤–µ—Ä–µ.",
                ephemeral=True
            )
            return
        
        await ctx.followup.send(f"‚úÖ –ù–∞—á–∏–Ω–∞—é —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞ **{source_guild.name}**...", ephemeral=True)
        
        structure = self._get_guild_structure(source_guild)
        
        try:
            with open(STRUCTURE_FILE_PATH, 'w', encoding='utf-8') as f:
                json.dump(structure, f, ensure_ascii=False, indent=4)
            await ctx.followup.send(f"‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–∞–Ω–∞–ª–æ–≤ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ —Ñ–∞–π–ª `{STRUCTURE_FILE_PATH}`.", ephemeral=True)
        except Exception as e:
            await ctx.followup.send(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª. –û—à–∏–±–∫–∞: {e}", ephemeral=True)

    def _get_guild_structure(self, guild: discord.Guild) -> Dict:
        """–°–æ–±–∏—Ä–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–∞–Ω–∞–ª–æ–≤ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å–µ—Ä–≤–µ—Ä–∞ –≤ —Å–ª–æ–≤–∞—Ä—å."""
        structure = {"categories": []}
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Ä—è–¥–∫–∞
        sorted_categories = sorted(guild.categories, key=lambda c: c.position)
        
        # –ö–∞–Ω–∞–ª—ã –±–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        non_categorized_text = sorted([c for c in guild.text_channels if not c.category], key=lambda c: c.position)
        non_categorized_voice = sorted([c for c in guild.voice_channels if not c.category], key=lambda c: c.position)
        
        if non_categorized_text or non_categorized_voice:
            structure["categories"].append({
                "name": None, # –ú–∞—Ä–∫–µ—Ä –¥–ª—è –∫–∞–Ω–∞–ª–æ–≤ –±–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                "channels": {
                    "text": [{"name": c.name} for c in non_categorized_text],
                    "voice": [{"name": c.name} for c in non_categorized_voice]
                }
            })

        # –ö–∞–Ω–∞–ª—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö
        for category in sorted_categories:
            structure["categories"].append({
                "name": category.name,
                "channels": {
                    "text": [{"name": c.name} for c in sorted(category.text_channels, key=lambda c: c.position)],
                    "voice": [{"name": c.name} for c in sorted(category.voice_channels, key=lambda c: c.position)]
                }
            })
        return structure

    async def _apply_guild_structure(self, guild: discord.Guild, server_structure: Dict) -> Dict:
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç –∫–∞–Ω–∞–ª—ã –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ, –≤–º–µ—Å—Ç–æ –ø–æ–ª–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è."""
        results = {'cats_created': 0, 'cats_deleted': 0, 'chans_created': 0, 'chans_deleted': 0, 'errors': 0}
        protected_channels = roles_config.PROTECTED_CHANNELS

        # --- 0. –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ä–æ–ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞ ---
        staff_roles = await self._get_staff_roles(guild)

        # --- 1. –°–±–æ—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ ---
        config_cat_map = {cat['name']: cat for cat in server_structure.get('categories', [])}
        config_all_chan_names = {chan['name'] for cat_data in server_structure.get('categories', []) for chan_type in ['text', 'voice'] for chan in cat_data.get('channels', {}).get(chan_type, [])}
        server_cats_map = {cat.name: cat for cat in guild.categories}

        # --- 2. –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ö–∞—Ç–µ–≥–æ—Ä–∏–π (–£–¥–∞–ª–µ–Ω–∏–µ –∏ –°–æ–∑–¥–∞–Ω–∏–µ) ---
        for cat_name, category in list(server_cats_map.items()):
            if cat_name not in config_cat_map:
                try:
                    await category.delete(reason="–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è: —É–¥–∞–ª–µ–Ω–∏–µ –ª–∏—à–Ω–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
                    results['cats_deleted'] += 1
                    del server_cats_map[cat_name]
                except Exception as e: results['errors'] += 1; print(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {cat_name}: {e}")
        
        for cat_name in config_cat_map:
            if cat_name and cat_name not in server_cats_map:
                try:
                    overwrites = self._get_overwrites(cat_name, 'category', staff_roles)
                    new_cat = await guild.create_category(name=cat_name, overwrites=overwrites, reason="–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è: —Å–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
                    server_cats_map[cat_name] = new_cat
                    results['cats_created'] += 1
                except Exception as e: results['errors'] += 1; print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {cat_name}: {e}")
        
        await asyncio.sleep(1)

        # --- 3. –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ö–∞–Ω–∞–ª–æ–≤ (–£–¥–∞–ª–µ–Ω–∏–µ –∏ –°–æ–∑–¥–∞–Ω–∏–µ) ---
        server_all_chans = [c for c in guild.channels if not isinstance(c, discord.CategoryChannel)]
        for chan in server_all_chans:
            if chan.name not in config_all_chan_names and chan.name not in protected_channels:
                try:
                    await chan.delete(reason="–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è: —É–¥–∞–ª–µ–Ω–∏–µ –ª–∏—à–Ω–µ–≥–æ –∫–∞–Ω–∞–ª–∞")
                    results['chans_deleted'] += 1
                except Exception as e: results['errors'] += 1; print(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞ {chan.name}: {e}")

        await asyncio.sleep(1)

        for cat_data in server_structure.get('categories', []):
            cat_name = cat_data.get('name')
            category_obj = server_cats_map.get(cat_name)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –≥–¥–µ –∏—Å–∫–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–∞–Ω–∞–ª—ã
            if category_obj: existing_chans_in_cat = {c.name for c in category_obj.channels}
            else: existing_chans_in_cat = {c.name for c in guild.channels if c.category is None and not isinstance(c, discord.CategoryChannel)}

            for chan_type in ['text', 'voice']:
                for chan_info in cat_data.get('channels', {}).get(chan_type, []):
                    chan_name = chan_info['name']
                    if chan_name not in existing_chans_in_cat:
                        creator = guild.create_text_channel if chan_type == 'text' else guild.create_voice_channel
                        try:
                            overwrites = self._get_overwrites(chan_name, 'channel', staff_roles, inherited_from=cat_name)
                            await creator(name=chan_name, category=category_obj, overwrites=overwrites, reason="–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è: —Å–æ–∑–¥–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞")
                            results['chans_created'] += 1
                            await asyncio.sleep(0.2)
                        except Exception as e: results['errors'] += 1; print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞–Ω–∞–ª–∞ {chan_name}: {e}")
        
        await asyncio.sleep(2)

        # --- 4. –§–∏–Ω–∞–ª—å–Ω–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ ---
        # –°–æ–±–∏—Ä–∞–µ–º –û–î–ò–ù –±–æ–ª—å—à–æ–π payload –¥–ª—è –û–î–ù–û–ì–û –≤—ã–∑–æ–≤–∞ API
        final_position_payload = {}
        position_counter = 0

        # –°–Ω–∞—á–∞–ª–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        for cat_data in server_structure.get('categories', []):
            cat_name = cat_data.get('name')
            if cat_name: # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–∞–Ω–∞–ª—ã –±–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                category_obj = discord.utils.get(guild.categories, name=cat_name)
                if category_obj:
                    if category_obj.position != position_counter:
                        final_position_payload[category_obj] = position_counter
                    position_counter += 1
        
        if final_position_payload:
            await guild.edit_channel_positions(positions=final_position_payload)
            await asyncio.sleep(1)
        
        # –ó–∞—Ç–µ–º –∫–∞–Ω–∞–ª—ã –≤–Ω—É—Ç—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        for cat_data in server_structure.get('categories', []):
            category_obj = discord.utils.get(guild.categories, name=cat_data.get('name'))
            # –ö–∞–Ω–∞–ª—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤–Ω—É—Ç—Ä–∏ —Å–≤–æ–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            # –° discord.py v2+ —ç—Ç–æ –¥–µ–ª–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ channel.edit(position=...)
            # –∏–ª–∏ guild.edit_channel_positions —Å –ø–æ–∑–∏—Ü–∏—è–º–∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, —á—Ç–æ —Å–ª–æ–∂–Ω–æ.
            # –ü–æ–ø—Ä–æ–±—É–µ–º –±–æ–ª–µ–µ –ø—Ä–æ—Å—Ç–æ–π –∏ –Ω–∞–¥–µ–∂–Ω—ã–π —Å–ø–æ—Å–æ–± - –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ.
            
            all_chans_in_cat_config = cat_data.get('channels', {}).get('text', []) + cat_data.get('channels', {}).get('voice', [])
            
            if category_obj: # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–Ω–∞–ª—ã –≤–Ω—É—Ç—Ä–∏ —Ä–µ–∞–ª—å–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                server_chans_in_cat = {c.name: c for c in category_obj.channels}
                for i, chan_info in enumerate(all_chans_in_cat_config):
                    chan_obj = server_chans_in_cat.get(chan_info['name'])
                    if chan_obj and chan_obj.position != i:
                        try:
                            # –î–ª—è –∫–∞–Ω–∞–ª–æ–≤ –≤–Ω—É—Ç—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏—Ö –ø–æ–∑–∏—Ü–∏—è –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–∞
                            await chan_obj.edit(position=i, reason="–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è: —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∫–∞–Ω–∞–ª–æ–≤")
                        except Exception as e:
                            results['errors'] += 1; print(f"–û—à–∏–±–∫–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –∫–∞–Ω–∞–ª–∞ {chan_obj.name}: {e}")

        return results

    async def _setup_roles(self, guild: discord.Guild) -> Dict:
        """–ü–æ–ª–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ—Å–æ–∑–¥–∞–µ—Ç —Ä–æ–ª–∏ —Å–æ–≥–ª–∞—Å–Ω–æ –∫–æ–Ω—Ñ–∏–≥—É –¥–ª—è –∏–¥–µ–∞–ª—å–Ω–æ–π –∏–µ—Ä–∞—Ä—Ö–∏–∏."""
        results = {'created': 0, 'deleted': 0, 'errors': 0}
        
        # --- 1. –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö —É–ø—Ä–∞–≤–ª—è–µ–º—ã—Ö —Ä–æ–ª–µ–π ---
        config_role_names = {role['name'] for role in roles_config.ROLES_STRUCTURE}
        for role in guild.roles:
            if role.name in config_role_names:
                try:
                    await role.delete(reason="–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è: –ø–æ–ª–Ω–æ–µ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ —Ä–æ–ª–µ–π")
                    results['deleted'] += 1
                except discord.HTTPException as e:
                    results['errors'] += 1
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ä–æ–π —Ä–æ–ª–∏ {role.name}: {e}")
        
        await asyncio.sleep(2) # –ü–∞—É–∑–∞ –ø–æ—Å–ª–µ –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è

        # --- 2. –°–æ–∑–¥–∞–Ω–∏–µ —Ä–æ–ª–µ–π —Å –Ω—É–ª—è ---
        created_roles = []
        for role_data in roles_config.ROLES_STRUCTURE:
            try:
                role_name = role_data.get("name")
                if not role_name: continue

                target_props = {
                    'permissions': role_data.get("permissions", roles_config.P_NO_PERMS),
                    'color': role_data.get("color", discord.Color.default()),
                    'hoist': role_data.get("hoist", False),
                    'mentionable': role_data.get("mentionable", False)
                }
                
                new_role = await guild.create_role(name=role_name, **target_props, reason="–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è: —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–æ–ª–∏")
                created_roles.append(new_role)
                results['created'] += 1
                await asyncio.sleep(0.3)
            except Exception as e:
                results['errors'] += 1
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–æ–ª–∏ {role_data.get('name')}: {e}")

        # --- 3. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∏–µ—Ä–∞—Ä—Ö–∏–∏ ---
        # Discord API —Ç—Ä–µ–±—É–µ—Ç, —á—Ç–æ–±—ã –ø–æ–∑–∏—Ü–∏–∏ –±—ã–ª–∏ –æ—Ç 1.
        # –ú—ã –ø–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –Ω–∞—à —Å–ø–∏—Å–æ–∫ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ä–æ–ª–µ–π, —á—Ç–æ–±—ã –≤–µ—Ä—Ö–Ω–∏–µ —Ä–æ–ª–∏ –≤ –∫–æ–Ω—Ñ–∏–≥–µ –ø–æ–ª—É—á–∏–ª–∏ –Ω–∞–∏–±–æ–ª—å—à—É—é –ø–æ–∑–∏—Ü–∏—é.
        position_payload = {role: i + 1 for i, role in enumerate(reversed(created_roles))}
        
        try:
            await guild.edit_role_positions(positions=position_payload)
        except Exception as e:
            results['errors'] += 1
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∏–µ—Ä–∞—Ä—Ö–∏–∏ —Ä–æ–ª–µ–π: {e}")

        # --- 4. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–æ–ª–∏ —Å–∞–º–æ–≥–æ –±–æ—Ç–∞ ---
        bot_member = guild.get_member(self.bot.user.id)
        if bot_member:
            # –†–æ–ª—å –±–æ—Ç–∞ - —ç—Ç–æ –µ–≥–æ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Ä–æ–ª—å.
            bot_role = discord.utils.get(guild.roles, managed=True, name=bot_member.name)
            if bot_role:
                try:
                    await bot_role.edit(
                        name="[ ‚ö´ 49BT ]", 
                        color=discord.Color.from_rgb(114, 137, 218), 
                        hoist=True,
                        reason="–ê–≤—Ç–æ-–Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–æ–ª–∏ –±–æ—Ç–∞"
                    )
                except Exception as e:
                    results['errors'] += 1
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ —Ä–æ–ª–∏ –±–æ—Ç–∞: {e}")

        return results

    def _get_overwrites(self, name: str, item_type: str, staff_roles: Dict[str, discord.Role], inherited_from: Optional[str] = None) -> Dict:
        """–°–æ–±–∏—Ä–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å –ø—Ä–∞–≤ –¥–ª—è –∫–∞–Ω–∞–ª–∞ –∏–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ñ–∏–≥–∞."""
        
        permission_key = None
        if item_type == 'category':
            permission_key = roles_config.CHANNEL_CONFIG['category_map'].get(name)
        elif item_type == 'channel':
            # –ü—Ä–∞–≤–∞ –∫–∞–Ω–∞–ª–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–µ–µ –ø—Ä–∞–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            permission_key = roles_config.CHANNEL_CONFIG['channel_map'].get(name)
            if not permission_key and inherited_from:
                permission_key = roles_config.CHANNEL_CONFIG['category_map'].get(inherited_from)

        if not permission_key:
            return {}
            
        permission_data = roles_config.CHANNEL_PERMISSIONS.get(permission_key, {})
        overwrites = {}
        
        for role_key, permissions in permission_data.items():
            target = None
            if role_key == '@everyone':
                target = staff_roles.get('@everyone') # –ò—Å–ø–æ–ª—å–∑—É–µ–º default_role, –¥–æ–±–∞–≤–ª–µ–Ω–Ω—É—é –≤ _get_staff_roles
            elif role_key in staff_roles:
                target = staff_roles[role_key]
            
            if target:
                overwrites[target] = permissions
        return overwrites

    async def _get_staff_roles(self, guild: discord.Guild) -> Dict[str, discord.Role]:
        """–ù–∞—Ö–æ–¥–∏—Ç –≤—Å–µ —Ä–æ–ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Ö –≤ –≤–∏–¥–µ —Å–ª–æ–≤–∞—Ä—è."""
        staff_roles = {'@everyone': guild.default_role}
        for role_data in roles_config.ROLES_STRUCTURE:
            if 'role_type' in role_data:
                # –ò—â–µ–º —Ä–æ–ª—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –ø–æ –∏–º–µ–Ω–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
                role = discord.utils.get(guild.roles, name=role_data['name'])
                if role:
                    staff_roles[role_data['role_type']] = role
        return staff_roles


def setup(bot: commands.Bot):
    bot.add_cog(ServerSetup(bot))
